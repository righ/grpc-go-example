// Code generated by protoc-gen-go. DO NOT EDIT.
// source: goodmorningworld.proto

package goodmorningworld

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type GoodmorningRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GoodmorningRequest) Reset()         { *m = GoodmorningRequest{} }
func (m *GoodmorningRequest) String() string { return proto.CompactTextString(m) }
func (*GoodmorningRequest) ProtoMessage()    {}
func (*GoodmorningRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4e0dee62205cbf6, []int{0}
}

func (m *GoodmorningRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GoodmorningRequest.Unmarshal(m, b)
}
func (m *GoodmorningRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GoodmorningRequest.Marshal(b, m, deterministic)
}
func (m *GoodmorningRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodmorningRequest.Merge(m, src)
}
func (m *GoodmorningRequest) XXX_Size() int {
	return xxx_messageInfo_GoodmorningRequest.Size(m)
}
func (m *GoodmorningRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodmorningRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GoodmorningRequest proto.InternalMessageInfo

func (m *GoodmorningRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type GoodmorningReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GoodmorningReply) Reset()         { *m = GoodmorningReply{} }
func (m *GoodmorningReply) String() string { return proto.CompactTextString(m) }
func (*GoodmorningReply) ProtoMessage()    {}
func (*GoodmorningReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4e0dee62205cbf6, []int{1}
}

func (m *GoodmorningReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GoodmorningReply.Unmarshal(m, b)
}
func (m *GoodmorningReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GoodmorningReply.Marshal(b, m, deterministic)
}
func (m *GoodmorningReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodmorningReply.Merge(m, src)
}
func (m *GoodmorningReply) XXX_Size() int {
	return xxx_messageInfo_GoodmorningReply.Size(m)
}
func (m *GoodmorningReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodmorningReply.DiscardUnknown(m)
}

var xxx_messageInfo_GoodmorningReply proto.InternalMessageInfo

func (m *GoodmorningReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*GoodmorningRequest)(nil), "goodmorningworld.GoodmorningRequest")
	proto.RegisterType((*GoodmorningReply)(nil), "goodmorningworld.GoodmorningReply")
}

func init() { proto.RegisterFile("goodmorningworld.proto", fileDescriptor_d4e0dee62205cbf6) }

var fileDescriptor_d4e0dee62205cbf6 = []byte{
	// 150 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4b, 0xcf, 0xcf, 0x4f,
	0xc9, 0xcd, 0x2f, 0xca, 0xcb, 0xcc, 0x4b, 0x2f, 0xcf, 0x2f, 0xca, 0x49, 0xd1, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x12, 0x40, 0x17, 0x57, 0xd2, 0xe0, 0x12, 0x72, 0x47, 0x88, 0x05, 0xa5, 0x16,
	0x96, 0xa6, 0x16, 0x97, 0x08, 0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x2a, 0x30,
	0x6a, 0x70, 0x06, 0x81, 0xd9, 0x4a, 0x3a, 0x5c, 0x02, 0x28, 0x2a, 0x0b, 0x72, 0x2a, 0x85, 0x24,
	0xb8, 0xd8, 0x73, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x61, 0x4a, 0x61, 0x5c, 0xa3, 0x4c, 0x2e, 0x76,
	0xf7, 0xa2, 0xd4, 0xd4, 0x92, 0xd4, 0x22, 0xa1, 0x38, 0x2e, 0xbe, 0xe0, 0xc4, 0x4a, 0x24, 0xbd,
	0x42, 0x2a, 0x7a, 0x18, 0xee, 0xc3, 0x74, 0x84, 0x94, 0x12, 0x01, 0x55, 0x05, 0x39, 0x95, 0x4a,
	0x0c, 0x1a, 0x8c, 0x49, 0x6c, 0x60, 0xbf, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x89, 0x33,
	0x30, 0x81, 0xf5, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GreeterClient interface {
	// Sends a greeting
	SayGoodmorning(ctx context.Context, opts ...grpc.CallOption) (Greeter_SayGoodmorningClient, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayGoodmorning(ctx context.Context, opts ...grpc.CallOption) (Greeter_SayGoodmorningClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[0], "/goodmorningworld.Greeter/SayGoodmorning", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterSayGoodmorningClient{stream}
	return x, nil
}

type Greeter_SayGoodmorningClient interface {
	Send(*GoodmorningRequest) error
	CloseAndRecv() (*GoodmorningReply, error)
	grpc.ClientStream
}

type greeterSayGoodmorningClient struct {
	grpc.ClientStream
}

func (x *greeterSayGoodmorningClient) Send(m *GoodmorningRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterSayGoodmorningClient) CloseAndRecv() (*GoodmorningReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GoodmorningReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreeterServer is the server API for Greeter service.
type GreeterServer interface {
	// Sends a greeting
	SayGoodmorning(Greeter_SayGoodmorningServer) error
}

// UnimplementedGreeterServer can be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (*UnimplementedGreeterServer) SayGoodmorning(srv Greeter_SayGoodmorningServer) error {
	return status.Errorf(codes.Unimplemented, "method SayGoodmorning not implemented")
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayGoodmorning_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).SayGoodmorning(&greeterSayGoodmorningServer{stream})
}

type Greeter_SayGoodmorningServer interface {
	SendAndClose(*GoodmorningReply) error
	Recv() (*GoodmorningRequest, error)
	grpc.ServerStream
}

type greeterSayGoodmorningServer struct {
	grpc.ServerStream
}

func (x *greeterSayGoodmorningServer) SendAndClose(m *GoodmorningReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterSayGoodmorningServer) Recv() (*GoodmorningRequest, error) {
	m := new(GoodmorningRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goodmorningworld.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayGoodmorning",
			Handler:       _Greeter_SayGoodmorning_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "goodmorningworld.proto",
}
